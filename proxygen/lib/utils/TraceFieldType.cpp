// Copyright 2004-present Facebook. All Rights Reserved.
// ** AUTOGENERATED FILE. DO NOT HAND-EDIT **

#include "proxygen/lib/utils/TraceFieldType.h"

#include <map>

namespace proxygen { 

static const std::string kTraceFieldTypeErrorStage = "error_stage";
static const std::string kTraceFieldTypeError = "error_description";
static const std::string kTraceFieldTypeProxygenError = "proxygen_error";
static const std::string kTraceFieldTypeHTTPStatus = "http_status";
static const std::string kTraceFieldTypeDirectionError = "error_direction";
static const std::string kTraceFieldTypeCodecError = "codec_error";
static const std::string kTraceFieldTypeUri = "uri";
static const std::string kTraceFieldTypeIsSecure = "is_secure";
static const std::string kTraceFieldTypeUsingProxy = "using_proxy";
static const std::string kTraceFieldTypeStatusCode = "status_code";
static const std::string kTraceFieldTypeProtocol = "protocol";
static const std::string kTraceFieldTypeLocalAddr = "local_addr";
static const std::string kTraceFieldTypeLocalPort = "local_port";
static const std::string kTraceFieldTypeContentType = "content_type";
static const std::string kTraceFieldTypeUsingSpdy = "using_spdy";
static const std::string kTraceFieldTypeReqHeaderSize = "request_header_size";
static const std::string kTraceFieldTypeReqBodySize = "request_body_size";
static const std::string kTraceFieldTypeRspHeaderSize = "response_header_size";
static const std::string kTraceFieldTypeRedirectLocation = "redirect_location";
static const std::string kTraceFieldTypeNumRedirects = "num_redirects";
static const std::string kTraceFieldTypeRedirectResponseCode = "redirect_response_code";
static const std::string kTraceFieldTypeNumRetries = "num_retries";
static const std::string kTraceFieldTypeRspBodySize = "response_body_size";
static const std::string kTraceFieldTypeRspIntvlAvg = "response_interval_average";
static const std::string kTraceFieldTypeRspIntvlStdDev = "response_interval_stddev";
static const std::string kTraceFieldTypeRspNumOnBody = "response_number_on_body";
static const std::string kTraceFieldTypeServerQuality = "response_server_quality";
static const std::string kTraceFieldTypeNewConnection = "new_connection";
static const std::string kTraceFieldTypeSessionManagerType = "sess_mgr_type";
static const std::string kTraceFieldTypeInFlightConns = "in_flight_conns";
static const std::string kTraceFieldTypeCachedSessions = "cached_sessions";
static const std::string kTraceFieldTypeConnsStarted = "conns_started";
static const std::string kTraceFieldTypeRequestsWaited = "requests_waited";
static const std::string kTraceFieldTypeTotalRequestsWaited = "total_requests_waited";
static const std::string kTraceFieldTypeTotalConnsStarted = "total_conns_started";
static const std::string kTraceFieldTypeServerAddr = "server_address";
static const std::string kTraceFieldTypeServerPort = "server_port";
static const std::string kTraceFieldTypeNewSession = "new_session";
static const std::string kTraceFieldTypeNumWaiting = "num_waiting";
static const std::string kTraceFieldTypeHostName = "host_name";
static const std::string kTraceFieldTypeIpAddr = "ip_address";
static const std::string kTraceFieldTypePort = "port";
static const std::string kTraceFieldTypeCNameRedirects = "cname_redirects";
static const std::string kTraceFieldTypeRedirectTime = "redirect_time";
static const std::string kTraceFieldTypeNumberResolvers = "number_resolvers";
static const std::string kTraceFieldTypeResolversSerialized = "resolvers_serialized";
static const std::string kTraceFieldTypeRequestFamily = "request_family";
static const std::string kTraceFieldTypeNumberAnswers = "number_answers";
static const std::string kTraceFieldTypeDNSCacheHit = "dns_cache_hit";
static const std::string kTraceFieldTypeDNSCacheStale = "dns_cache_stale";
static const std::string kTraceFieldTypeDNSCacheInflight = "dns_cache_inflight";
static const std::string kTraceFieldTypeTLSReused = "tls_reused";
static const std::string kTraceFieldTypeTLSCacheHit = "tls_cache_hit";
static const std::string kTraceFieldTypeCipherName = "cipher_name";
static const std::string kTraceFieldTypeTLSVersion = "ssl_version";
static const std::string kTraceFieldTypeTLSCachePersistence = "tls_cache_persistence";
static const std::string kTraceFieldTypeCompressedSizeKey = "compressed_size";
static const std::string kTraceFieldTypeUncompressedSizeKey = "uncompressed_size";
static const std::string kTraceFieldTypeCompressionType = "compression_type";
static const std::string kTraceFieldTypeVerifiedSuccess = "verified_success";
static const std::string kTraceFieldTypeVerifiedChain = "verified_chain";
static const std::string kTraceFieldTypeVerifiedParams = "verified_params";
static const std::string kTraceFieldTypeVerifiedTime = "verified_time";
static const std::string kTraceFieldTypeVerifiedServerAddress = "verified_server_address";
static const std::string kTraceFieldTypeVerifiedProxyAddress = "verified_proxy_address";
static const std::string kTraceFieldTypeVerifiedError = "verified_error";
static const std::string kTraceFieldTypeVerifiedReason = "verified_reason";
static const std::string kTraceFieldTypeVerifiedHostname = "verified_hostname";
static const std::string kTraceFieldTypeProxyHost = "proxy_host";
static const std::string kTraceFieldTypeProxyPort = "proxy_port";
static const std::string kTraceFieldTypeReadBytes = "read_bytes";
static const std::string kTraceFieldTypeWriteBytes = "write_bytes";
static const std::string kTraceFieldTypeSchedulerType = "scheduler_type";
static const std::string kTraceFieldTypeInitialPriority = "initial_priority";
static const std::string kTraceFieldTypeSizeOfQueue = "size_of_queue";
static const std::string kTraceFieldTypePreviousState = "previous_state";
static const std::string kTraceFieldTypeCurrentState = "current_state";
static const std::string kTraceFieldTypeNetworkID = "network_id";
static const std::string kTraceFieldTypeCachedFamily = "cached_family";
static const std::string kTraceFieldTypeSucceededFamily = "succeeded_family";
static const std::string kTraceFieldTypeNumConnAttempts = "number_conn_attempts";
static const std::string kTraceFieldTypeAttemptAddrs = "attempt_addresses";
static const std::string kTraceFieldTypeAttemptAddrFamily = "attempt_address_family";
static const std::string kTraceFieldTypeSucceededAddr = "succeeded_address";
static const std::string kTraceFieldTypeSucceededConnTime = "succeeded_conn_time";
static const std::string kTraceFieldTypeRequestID = "request_id";
static const std::string kTraceFieldTypeHumanReadableName = "human_readable_name";
const std::string& getTraceFieldTypeString(TraceFieldType type) {
  static const std::string kTraceFieldTypeInvalidType = "";

  switch (type) {
    case TraceFieldType::ErrorStage : return kTraceFieldTypeErrorStage;
    case TraceFieldType::Error : return kTraceFieldTypeError;
    case TraceFieldType::ProxygenError : return kTraceFieldTypeProxygenError;
    case TraceFieldType::HTTPStatus : return kTraceFieldTypeHTTPStatus;
    case TraceFieldType::DirectionError : return kTraceFieldTypeDirectionError;
    case TraceFieldType::CodecError : return kTraceFieldTypeCodecError;
    case TraceFieldType::Uri : return kTraceFieldTypeUri;
    case TraceFieldType::IsSecure : return kTraceFieldTypeIsSecure;
    case TraceFieldType::UsingProxy : return kTraceFieldTypeUsingProxy;
    case TraceFieldType::StatusCode : return kTraceFieldTypeStatusCode;
    case TraceFieldType::Protocol : return kTraceFieldTypeProtocol;
    case TraceFieldType::LocalAddr : return kTraceFieldTypeLocalAddr;
    case TraceFieldType::LocalPort : return kTraceFieldTypeLocalPort;
    case TraceFieldType::ContentType : return kTraceFieldTypeContentType;
    case TraceFieldType::UsingSpdy : return kTraceFieldTypeUsingSpdy;
    case TraceFieldType::ReqHeaderSize : return kTraceFieldTypeReqHeaderSize;
    case TraceFieldType::ReqBodySize : return kTraceFieldTypeReqBodySize;
    case TraceFieldType::RspHeaderSize : return kTraceFieldTypeRspHeaderSize;
    case TraceFieldType::RedirectLocation : return kTraceFieldTypeRedirectLocation;
    case TraceFieldType::NumRedirects : return kTraceFieldTypeNumRedirects;
    case TraceFieldType::RedirectResponseCode : return kTraceFieldTypeRedirectResponseCode;
    case TraceFieldType::NumRetries : return kTraceFieldTypeNumRetries;
    case TraceFieldType::RspBodySize : return kTraceFieldTypeRspBodySize;
    case TraceFieldType::RspIntvlAvg : return kTraceFieldTypeRspIntvlAvg;
    case TraceFieldType::RspIntvlStdDev : return kTraceFieldTypeRspIntvlStdDev;
    case TraceFieldType::RspNumOnBody : return kTraceFieldTypeRspNumOnBody;
    case TraceFieldType::ServerQuality : return kTraceFieldTypeServerQuality;
    case TraceFieldType::NewConnection : return kTraceFieldTypeNewConnection;
    case TraceFieldType::SessionManagerType : return kTraceFieldTypeSessionManagerType;
    case TraceFieldType::InFlightConns : return kTraceFieldTypeInFlightConns;
    case TraceFieldType::CachedSessions : return kTraceFieldTypeCachedSessions;
    case TraceFieldType::ConnsStarted : return kTraceFieldTypeConnsStarted;
    case TraceFieldType::RequestsWaited : return kTraceFieldTypeRequestsWaited;
    case TraceFieldType::TotalRequestsWaited : return kTraceFieldTypeTotalRequestsWaited;
    case TraceFieldType::TotalConnsStarted : return kTraceFieldTypeTotalConnsStarted;
    case TraceFieldType::ServerAddr : return kTraceFieldTypeServerAddr;
    case TraceFieldType::ServerPort : return kTraceFieldTypeServerPort;
    case TraceFieldType::NewSession : return kTraceFieldTypeNewSession;
    case TraceFieldType::NumWaiting : return kTraceFieldTypeNumWaiting;
    case TraceFieldType::HostName : return kTraceFieldTypeHostName;
    case TraceFieldType::IpAddr : return kTraceFieldTypeIpAddr;
    case TraceFieldType::Port : return kTraceFieldTypePort;
    case TraceFieldType::CNameRedirects : return kTraceFieldTypeCNameRedirects;
    case TraceFieldType::RedirectTime : return kTraceFieldTypeRedirectTime;
    case TraceFieldType::NumberResolvers : return kTraceFieldTypeNumberResolvers;
    case TraceFieldType::ResolversSerialized : return kTraceFieldTypeResolversSerialized;
    case TraceFieldType::RequestFamily : return kTraceFieldTypeRequestFamily;
    case TraceFieldType::NumberAnswers : return kTraceFieldTypeNumberAnswers;
    case TraceFieldType::DNSCacheHit : return kTraceFieldTypeDNSCacheHit;
    case TraceFieldType::DNSCacheStale : return kTraceFieldTypeDNSCacheStale;
    case TraceFieldType::DNSCacheInflight : return kTraceFieldTypeDNSCacheInflight;
    case TraceFieldType::TLSReused : return kTraceFieldTypeTLSReused;
    case TraceFieldType::TLSCacheHit : return kTraceFieldTypeTLSCacheHit;
    case TraceFieldType::CipherName : return kTraceFieldTypeCipherName;
    case TraceFieldType::TLSVersion : return kTraceFieldTypeTLSVersion;
    case TraceFieldType::TLSCachePersistence : return kTraceFieldTypeTLSCachePersistence;
    case TraceFieldType::CompressedSizeKey : return kTraceFieldTypeCompressedSizeKey;
    case TraceFieldType::UncompressedSizeKey : return kTraceFieldTypeUncompressedSizeKey;
    case TraceFieldType::CompressionType : return kTraceFieldTypeCompressionType;
    case TraceFieldType::VerifiedSuccess : return kTraceFieldTypeVerifiedSuccess;
    case TraceFieldType::VerifiedChain : return kTraceFieldTypeVerifiedChain;
    case TraceFieldType::VerifiedParams : return kTraceFieldTypeVerifiedParams;
    case TraceFieldType::VerifiedTime : return kTraceFieldTypeVerifiedTime;
    case TraceFieldType::VerifiedServerAddress : return kTraceFieldTypeVerifiedServerAddress;
    case TraceFieldType::VerifiedProxyAddress : return kTraceFieldTypeVerifiedProxyAddress;
    case TraceFieldType::VerifiedError : return kTraceFieldTypeVerifiedError;
    case TraceFieldType::VerifiedReason : return kTraceFieldTypeVerifiedReason;
    case TraceFieldType::VerifiedHostname : return kTraceFieldTypeVerifiedHostname;
    case TraceFieldType::ProxyHost : return kTraceFieldTypeProxyHost;
    case TraceFieldType::ProxyPort : return kTraceFieldTypeProxyPort;
    case TraceFieldType::ReadBytes : return kTraceFieldTypeReadBytes;
    case TraceFieldType::WriteBytes : return kTraceFieldTypeWriteBytes;
    case TraceFieldType::SchedulerType : return kTraceFieldTypeSchedulerType;
    case TraceFieldType::InitialPriority : return kTraceFieldTypeInitialPriority;
    case TraceFieldType::SizeOfQueue : return kTraceFieldTypeSizeOfQueue;
    case TraceFieldType::PreviousState : return kTraceFieldTypePreviousState;
    case TraceFieldType::CurrentState : return kTraceFieldTypeCurrentState;
    case TraceFieldType::NetworkID : return kTraceFieldTypeNetworkID;
    case TraceFieldType::CachedFamily : return kTraceFieldTypeCachedFamily;
    case TraceFieldType::SucceededFamily : return kTraceFieldTypeSucceededFamily;
    case TraceFieldType::NumConnAttempts : return kTraceFieldTypeNumConnAttempts;
    case TraceFieldType::AttemptAddrs : return kTraceFieldTypeAttemptAddrs;
    case TraceFieldType::AttemptAddrFamily : return kTraceFieldTypeAttemptAddrFamily;
    case TraceFieldType::SucceededAddr : return kTraceFieldTypeSucceededAddr;
    case TraceFieldType::SucceededConnTime : return kTraceFieldTypeSucceededConnTime;
    case TraceFieldType::RequestID : return kTraceFieldTypeRequestID;
    case TraceFieldType::HumanReadableName : return kTraceFieldTypeHumanReadableName;
  }
  return kTraceFieldTypeInvalidType;
};

  TraceFieldType getTraceFieldTypeFromString(const std::string& str) {
  if (str == kTraceFieldTypeErrorStage)  return TraceFieldType::ErrorStage;
  if (str == kTraceFieldTypeError)  return TraceFieldType::Error;
  if (str == kTraceFieldTypeProxygenError)  return TraceFieldType::ProxygenError;
  if (str == kTraceFieldTypeHTTPStatus)  return TraceFieldType::HTTPStatus;
  if (str == kTraceFieldTypeDirectionError)  return TraceFieldType::DirectionError;
  if (str == kTraceFieldTypeCodecError)  return TraceFieldType::CodecError;
  if (str == kTraceFieldTypeUri)  return TraceFieldType::Uri;
  if (str == kTraceFieldTypeIsSecure)  return TraceFieldType::IsSecure;
  if (str == kTraceFieldTypeUsingProxy)  return TraceFieldType::UsingProxy;
  if (str == kTraceFieldTypeStatusCode)  return TraceFieldType::StatusCode;
  if (str == kTraceFieldTypeProtocol)  return TraceFieldType::Protocol;
  if (str == kTraceFieldTypeLocalAddr)  return TraceFieldType::LocalAddr;
  if (str == kTraceFieldTypeLocalPort)  return TraceFieldType::LocalPort;
  if (str == kTraceFieldTypeContentType)  return TraceFieldType::ContentType;
  if (str == kTraceFieldTypeUsingSpdy)  return TraceFieldType::UsingSpdy;
  if (str == kTraceFieldTypeReqHeaderSize)  return TraceFieldType::ReqHeaderSize;
  if (str == kTraceFieldTypeReqBodySize)  return TraceFieldType::ReqBodySize;
  if (str == kTraceFieldTypeRspHeaderSize)  return TraceFieldType::RspHeaderSize;
  if (str == kTraceFieldTypeRedirectLocation)  return TraceFieldType::RedirectLocation;
  if (str == kTraceFieldTypeNumRedirects)  return TraceFieldType::NumRedirects;
  if (str == kTraceFieldTypeRedirectResponseCode)  return TraceFieldType::RedirectResponseCode;
  if (str == kTraceFieldTypeNumRetries)  return TraceFieldType::NumRetries;
  if (str == kTraceFieldTypeRspBodySize)  return TraceFieldType::RspBodySize;
  if (str == kTraceFieldTypeRspIntvlAvg)  return TraceFieldType::RspIntvlAvg;
  if (str == kTraceFieldTypeRspIntvlStdDev)  return TraceFieldType::RspIntvlStdDev;
  if (str == kTraceFieldTypeRspNumOnBody)  return TraceFieldType::RspNumOnBody;
  if (str == kTraceFieldTypeServerQuality)  return TraceFieldType::ServerQuality;
  if (str == kTraceFieldTypeNewConnection)  return TraceFieldType::NewConnection;
  if (str == kTraceFieldTypeSessionManagerType)  return TraceFieldType::SessionManagerType;
  if (str == kTraceFieldTypeInFlightConns)  return TraceFieldType::InFlightConns;
  if (str == kTraceFieldTypeCachedSessions)  return TraceFieldType::CachedSessions;
  if (str == kTraceFieldTypeConnsStarted)  return TraceFieldType::ConnsStarted;
  if (str == kTraceFieldTypeRequestsWaited)  return TraceFieldType::RequestsWaited;
  if (str == kTraceFieldTypeTotalRequestsWaited)  return TraceFieldType::TotalRequestsWaited;
  if (str == kTraceFieldTypeTotalConnsStarted)  return TraceFieldType::TotalConnsStarted;
  if (str == kTraceFieldTypeServerAddr)  return TraceFieldType::ServerAddr;
  if (str == kTraceFieldTypeServerPort)  return TraceFieldType::ServerPort;
  if (str == kTraceFieldTypeNewSession)  return TraceFieldType::NewSession;
  if (str == kTraceFieldTypeNumWaiting)  return TraceFieldType::NumWaiting;
  if (str == kTraceFieldTypeHostName)  return TraceFieldType::HostName;
  if (str == kTraceFieldTypeIpAddr)  return TraceFieldType::IpAddr;
  if (str == kTraceFieldTypePort)  return TraceFieldType::Port;
  if (str == kTraceFieldTypeCNameRedirects)  return TraceFieldType::CNameRedirects;
  if (str == kTraceFieldTypeRedirectTime)  return TraceFieldType::RedirectTime;
  if (str == kTraceFieldTypeNumberResolvers)  return TraceFieldType::NumberResolvers;
  if (str == kTraceFieldTypeResolversSerialized)  return TraceFieldType::ResolversSerialized;
  if (str == kTraceFieldTypeRequestFamily)  return TraceFieldType::RequestFamily;
  if (str == kTraceFieldTypeNumberAnswers)  return TraceFieldType::NumberAnswers;
  if (str == kTraceFieldTypeDNSCacheHit)  return TraceFieldType::DNSCacheHit;
  if (str == kTraceFieldTypeDNSCacheStale)  return TraceFieldType::DNSCacheStale;
  if (str == kTraceFieldTypeDNSCacheInflight)  return TraceFieldType::DNSCacheInflight;
  if (str == kTraceFieldTypeTLSReused)  return TraceFieldType::TLSReused;
  if (str == kTraceFieldTypeTLSCacheHit)  return TraceFieldType::TLSCacheHit;
  if (str == kTraceFieldTypeCipherName)  return TraceFieldType::CipherName;
  if (str == kTraceFieldTypeTLSVersion)  return TraceFieldType::TLSVersion;
  if (str == kTraceFieldTypeTLSCachePersistence)  return TraceFieldType::TLSCachePersistence;
  if (str == kTraceFieldTypeCompressedSizeKey)  return TraceFieldType::CompressedSizeKey;
  if (str == kTraceFieldTypeUncompressedSizeKey)  return TraceFieldType::UncompressedSizeKey;
  if (str == kTraceFieldTypeCompressionType)  return TraceFieldType::CompressionType;
  if (str == kTraceFieldTypeVerifiedSuccess)  return TraceFieldType::VerifiedSuccess;
  if (str == kTraceFieldTypeVerifiedChain)  return TraceFieldType::VerifiedChain;
  if (str == kTraceFieldTypeVerifiedParams)  return TraceFieldType::VerifiedParams;
  if (str == kTraceFieldTypeVerifiedTime)  return TraceFieldType::VerifiedTime;
  if (str == kTraceFieldTypeVerifiedServerAddress)  return TraceFieldType::VerifiedServerAddress;
  if (str == kTraceFieldTypeVerifiedProxyAddress)  return TraceFieldType::VerifiedProxyAddress;
  if (str == kTraceFieldTypeVerifiedError)  return TraceFieldType::VerifiedError;
  if (str == kTraceFieldTypeVerifiedReason)  return TraceFieldType::VerifiedReason;
  if (str == kTraceFieldTypeVerifiedHostname)  return TraceFieldType::VerifiedHostname;
  if (str == kTraceFieldTypeProxyHost)  return TraceFieldType::ProxyHost;
  if (str == kTraceFieldTypeProxyPort)  return TraceFieldType::ProxyPort;
  if (str == kTraceFieldTypeReadBytes)  return TraceFieldType::ReadBytes;
  if (str == kTraceFieldTypeWriteBytes)  return TraceFieldType::WriteBytes;
  if (str == kTraceFieldTypeSchedulerType)  return TraceFieldType::SchedulerType;
  if (str == kTraceFieldTypeInitialPriority)  return TraceFieldType::InitialPriority;
  if (str == kTraceFieldTypeSizeOfQueue)  return TraceFieldType::SizeOfQueue;
  if (str == kTraceFieldTypePreviousState)  return TraceFieldType::PreviousState;
  if (str == kTraceFieldTypeCurrentState)  return TraceFieldType::CurrentState;
  if (str == kTraceFieldTypeNetworkID)  return TraceFieldType::NetworkID;
  if (str == kTraceFieldTypeCachedFamily)  return TraceFieldType::CachedFamily;
  if (str == kTraceFieldTypeSucceededFamily)  return TraceFieldType::SucceededFamily;
  if (str == kTraceFieldTypeNumConnAttempts)  return TraceFieldType::NumConnAttempts;
  if (str == kTraceFieldTypeAttemptAddrs)  return TraceFieldType::AttemptAddrs;
  if (str == kTraceFieldTypeAttemptAddrFamily)  return TraceFieldType::AttemptAddrFamily;
  if (str == kTraceFieldTypeSucceededAddr)  return TraceFieldType::SucceededAddr;
  if (str == kTraceFieldTypeSucceededConnTime)  return TraceFieldType::SucceededConnTime;
  if (str == kTraceFieldTypeRequestID)  return TraceFieldType::RequestID;
  if (str == kTraceFieldTypeHumanReadableName)  return TraceFieldType::HumanReadableName;
 throw std::invalid_argument ("No matching TraceFieldType from string");
};


}

