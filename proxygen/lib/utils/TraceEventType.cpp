// Copyright 2004-present Facebook. All Rights Reserved.
// ** AUTOGENERATED FILE. DO NOT HAND-EDIT **

#include "proxygen/lib/utils/TraceEventType.h"

#include <map>

namespace proxygen { 

static const std::string kTraceEventTypeRequestExchange = "HTTPRequestExchange";
static const std::string kTraceEventTypeResponseBodyRead = "HTTPResponseBodyRead";
static const std::string kTraceEventTypePreConnect = "PreConnect";
static const std::string kTraceEventTypePostConnect = "PostConnect";
static const std::string kTraceEventTypeDnsResolution = "DNSResolution";
static const std::string kTraceEventTypeDnsCache = "DNSCache";
static const std::string kTraceEventTypeTcpConnect = "TCPConnect";
static const std::string kTraceEventTypeTlsSetup = "TLSSetup";
static const std::string kTraceEventTypeTotalConnect = "TotalConnect";
static const std::string kTraceEventTypeDecompression = "decompression_filter";
static const std::string kTraceEventTypeCertVerification = "cert_verification";
static const std::string kTraceEventTypeProxyConnect = "proxy_connect";
static const std::string kTraceEventTypeReadSocket = "read_socket";
static const std::string kTraceEventTypeWriteSocket = "write_socket";
static const std::string kTraceEventTypeScheduling = "scheduling";
static const std::string kTraceEventTypeNetworkChange = "network_change";
static const std::string kTraceEventTypeHappyEyeballs = "happy_eyeballs";
static const std::string kTraceEventTypeMultiConnector = "multi_connector";
static const std::string kTraceEventTypeSingleConnector = "single_connector";
static const std::string kTraceEventTypeFBLigerProtocol = "FBLigerProtocol";
const std::string& getTraceEventTypeString(TraceEventType type) {
  static const std::string kTraceEventTypeInvalidType = "";

  switch (type) {
    case TraceEventType::RequestExchange : return kTraceEventTypeRequestExchange;
    case TraceEventType::ResponseBodyRead : return kTraceEventTypeResponseBodyRead;
    case TraceEventType::PreConnect : return kTraceEventTypePreConnect;
    case TraceEventType::PostConnect : return kTraceEventTypePostConnect;
    case TraceEventType::DnsResolution : return kTraceEventTypeDnsResolution;
    case TraceEventType::DnsCache : return kTraceEventTypeDnsCache;
    case TraceEventType::TcpConnect : return kTraceEventTypeTcpConnect;
    case TraceEventType::TlsSetup : return kTraceEventTypeTlsSetup;
    case TraceEventType::TotalConnect : return kTraceEventTypeTotalConnect;
    case TraceEventType::Decompression : return kTraceEventTypeDecompression;
    case TraceEventType::CertVerification : return kTraceEventTypeCertVerification;
    case TraceEventType::ProxyConnect : return kTraceEventTypeProxyConnect;
    case TraceEventType::ReadSocket : return kTraceEventTypeReadSocket;
    case TraceEventType::WriteSocket : return kTraceEventTypeWriteSocket;
    case TraceEventType::Scheduling : return kTraceEventTypeScheduling;
    case TraceEventType::NetworkChange : return kTraceEventTypeNetworkChange;
    case TraceEventType::HappyEyeballs : return kTraceEventTypeHappyEyeballs;
    case TraceEventType::MultiConnector : return kTraceEventTypeMultiConnector;
    case TraceEventType::SingleConnector : return kTraceEventTypeSingleConnector;
    case TraceEventType::FBLigerProtocol : return kTraceEventTypeFBLigerProtocol;
  }
  return kTraceEventTypeInvalidType;
};

  TraceEventType getTraceEventTypeFromString(const std::string& str) {
  if (str == kTraceEventTypeRequestExchange)  return TraceEventType::RequestExchange;
  if (str == kTraceEventTypeResponseBodyRead)  return TraceEventType::ResponseBodyRead;
  if (str == kTraceEventTypePreConnect)  return TraceEventType::PreConnect;
  if (str == kTraceEventTypePostConnect)  return TraceEventType::PostConnect;
  if (str == kTraceEventTypeDnsResolution)  return TraceEventType::DnsResolution;
  if (str == kTraceEventTypeDnsCache)  return TraceEventType::DnsCache;
  if (str == kTraceEventTypeTcpConnect)  return TraceEventType::TcpConnect;
  if (str == kTraceEventTypeTlsSetup)  return TraceEventType::TlsSetup;
  if (str == kTraceEventTypeTotalConnect)  return TraceEventType::TotalConnect;
  if (str == kTraceEventTypeDecompression)  return TraceEventType::Decompression;
  if (str == kTraceEventTypeCertVerification)  return TraceEventType::CertVerification;
  if (str == kTraceEventTypeProxyConnect)  return TraceEventType::ProxyConnect;
  if (str == kTraceEventTypeReadSocket)  return TraceEventType::ReadSocket;
  if (str == kTraceEventTypeWriteSocket)  return TraceEventType::WriteSocket;
  if (str == kTraceEventTypeScheduling)  return TraceEventType::Scheduling;
  if (str == kTraceEventTypeNetworkChange)  return TraceEventType::NetworkChange;
  if (str == kTraceEventTypeHappyEyeballs)  return TraceEventType::HappyEyeballs;
  if (str == kTraceEventTypeMultiConnector)  return TraceEventType::MultiConnector;
  if (str == kTraceEventTypeSingleConnector)  return TraceEventType::SingleConnector;
  if (str == kTraceEventTypeFBLigerProtocol)  return TraceEventType::FBLigerProtocol;
 throw std::invalid_argument ("No matching TraceEventType from string");
};


}

